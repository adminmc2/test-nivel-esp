// =================================
// CONFIGURACI√ìN COMPLETA - HABLANDIS TEST DE ESPA√ëOL
// =================================

/**
 * Configuraci√≥n para conectar con Airtable
 */

const AIRTABLE_CONFIG = {
    // üîß MISMOS DATOS QUE INGL√âS (YA FUNCIONAN)
    apiToken: 'patySknPPBjipirTG.5eb66357ee49c95daad4046b60ac6fc70009d66804e65963bdb4d7ad02c90a2f',
    baseId: 'appvXqjRdinq686ey',
    tableName: 'Resultados de Test de Nivel'
};

// =================================
// üîß CONFIGURACI√ìN reCAPTCHA v2 - USANDO SITE KEY QUE FUNCIONA
// =================================

const RECAPTCHA_CONFIG = {
    // üîß ‚≠ê SITE KEY QUE YA FUNCIONA EN INGL√âS ‚≠ê
    siteKey: '6LdSA3orAAAAAM8tvQxUOqdHOfSp_dWZakH7uXnx',  // CAMBIADO: era 6LcqmngrAAAAADrOlsQ_WWUZ9oOu-BZtnG6yki8z
    action: 'submit_test'
};

// =================================
// CONFIGURACI√ìN ADICIONAL
// =================================

// Habilitar logs para debugging (cambiar a false en producci√≥n)
const DEBUG_MODE = true;

// Funci√≥n para logging
function logDebug(message, data = null) {
    if (DEBUG_MODE) {
        console.log(`[DEBUG] ${message}`, data);
    }
}

// =================================
// VALIDACIONES DE CONFIGURACI√ìN
// =================================

// Validar configuraci√≥n de Airtable
function validateAirtableConfig() {
    const required = ['apiToken', 'baseId', 'tableName'];
    const missing = required.filter(key => 
        !AIRTABLE_CONFIG[key] || AIRTABLE_CONFIG[key].includes('TU_')
    );
    
    if (missing.length > 0) {
        console.warn('‚ö†Ô∏è Configuraci√≥n de Airtable incompleta. Faltan:', missing);
        console.warn('üí° Edita las claves en AIRTABLE_CONFIG al inicio del archivo');
        return false;
    }
    
    return true;
}

// Validar configuraci√≥n de reCAPTCHA
function validateRecaptchaConfig() {
    if (!RECAPTCHA_CONFIG.siteKey || RECAPTCHA_CONFIG.siteKey.includes('TU_')) {
        console.warn('‚ö†Ô∏è Configuraci√≥n de reCAPTCHA incompleta: falta Site Key');
        console.warn('üí° Edita la siteKey en RECAPTCHA_CONFIG al inicio del archivo');
        console.warn('üìã Tambi√©n actualiza index.html l√≠nea 12 con la misma Site Key');
        return false;
    }
    
    return true;
}

// Validar que reCAPTCHA est√© cargado
function isRecaptchaLoaded() {
    return typeof grecaptcha !== 'undefined';
}

// Funci√≥n principal de validaci√≥n
function validateAllConfigs() {
    const airtableValid = validateAirtableConfig();
    const recaptchaConfigValid = validateRecaptchaConfig();
    const recaptchaLoaded = isRecaptchaLoaded();
    
    logDebug('Estado de configuraciones:', {
        airtable: airtableValid ? '‚úÖ V√°lida' : '‚ùå Incompleta',
        recaptchaConfig: recaptchaConfigValid ? '‚úÖ V√°lida' : '‚ùå Incompleta',
        recaptchaLoaded: recaptchaLoaded ? '‚úÖ Cargado' : '‚ùå No cargado'
    });
    
    return {
        airtable: airtableValid,
        recaptcha: recaptchaConfigValid && recaptchaLoaded,
        overall: airtableValid && recaptchaConfigValid
    };
}

// =================================
// FUNCI√ìN PARA VERIFICAR RECAPTCHA v2 - NUEVA
// =================================

/**
 * Ejecuta la verificaci√≥n de reCAPTCHA v2
 * @returns {Promise<string|null>} Token de reCAPTCHA o null si falla
 */
async function executeRecaptcha() {
    try {
        if (!isRecaptchaLoaded()) {
            logDebug('‚ùå reCAPTCHA no est√° cargado');
            return null;
        }
        
        if (!validateRecaptchaConfig()) {
            logDebug('‚ùå Configuraci√≥n de reCAPTCHA inv√°lida');
            return null;
        }
        
        // Para reCAPTCHA v2, usamos getResponse() en lugar de execute()
        logDebug('üîÑ Obteniendo respuesta reCAPTCHA v2...');
        
        if (window.recaptchaWidgetId !== undefined) {
            const token = grecaptcha.getResponse(window.recaptchaWidgetId);
            
            if (token) {
                logDebug('‚úÖ reCAPTCHA v2 token obtenido exitosamente');
                return token;
            } else {
                logDebug('‚ùå Usuario no complet√≥ reCAPTCHA v2');
                return null;
            }
        } else {
            logDebug('‚ùå Widget reCAPTCHA v2 no est√° renderizado');
            return null;
        }
    } catch (error) {
        console.error('‚ùå Error en reCAPTCHA v2:', error);
        return null;
    }
}

// =================================
// INICIALIZACI√ìN AL CARGAR LA P√ÅGINA
// =================================

// Validar configuraciones al cargar la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    logDebug('üöÄ Inicializando configuraciones ESPA√ëOL...');
    
    const validation = validateAllConfigs();
    
    if (validation.overall) {
        logDebug('‚úÖ Todas las configuraciones est√°n completas');
    } else {
        console.warn('‚ö†Ô∏è Hay configuraciones incompletas. Revisa la consola para m√°s detalles.');
    }
});

// =================================
// CONFIGURACI√ìN reCAPTCHA v2 CALLBACK
// =================================

// Callback global para reCAPTCHA v2
window.onRecaptchaLoad = function() {
    console.log('‚úÖ reCAPTCHA v2 script loaded and ready');
    window.recaptchaReady = true;
    window.dispatchEvent(new CustomEvent('recaptchaReady'));
};

// =================================
// EXPORTAR CONFIGURACIONES
// =================================

// Las configuraciones est√°n disponibles globalmente
// AIRTABLE_CONFIG, RECAPTCHA_CONFIG, executeRecaptcha(), validateAllConfigs()
